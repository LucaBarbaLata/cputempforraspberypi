from PyQt5.QtCore import QUrl
from PyQt5.QtWidgets import QApplication, QMainWindow, QTabWidget, QWidget, QVBoxLayout, QHBoxLayout, QLineEdit, \
    QPushButton, QAction, QLabel
from PyQt5.QtWebEngineWidgets import QWebEngineView
import sys
import re


class BrowserWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Surfy Browser")
        self.setGeometry(100, 100, 800, 600)

        # Create a tab widget
        self.tab_widget = QTabWidget()
        self.tab_widget.setTabsClosable(True)
        self.tab_widget.tabCloseRequested.connect(self.close_tab)
        self.setCentralWidget(self.tab_widget)

        # Create a new tab on startup
        self.add_new_tab()

        # Create a toolbar
        toolbar = self.addToolBar("Navigation")

        # Create back button
        back_button = QAction("<", self)
        back_button.triggered.connect(self.go_back)
        toolbar.addAction(back_button)

        # Create forward button
        forward_button = QAction(">", self)
        forward_button.triggered.connect(self.go_forward)
        toolbar.addAction(forward_button)

        # Create reload button
        reload_button = QAction("Q", self)
        reload_button.triggered.connect(self.reload_page)
        toolbar.addAction(reload_button)

        # Create link bar
        self.link_bar = QLabel()
        toolbar.addWidget(self.link_bar)

        # Create new tab button
        new_tab_button = QAction("+", self)
        new_tab_button.triggered.connect(self.add_new_tab)
        toolbar.addAction(new_tab_button)

    def add_new_tab(self):
        # Create a new tab
        tab = QWidget()
        tab_layout = QVBoxLayout(tab)
        tab_layout.setContentsMargins(0, 0, 0, 0)

        # Create a web view for the tab
        web_view = QWebEngineView()
        tab_layout.addWidget(web_view)

        # Create a URL entry field
        url_entry = QLineEdit()
        url_entry.returnPressed.connect(lambda: self.load_url(web_view, url_entry.text()))
        tab_layout.addWidget(url_entry)

        # Create a Go button
        go_button = QPushButton("Go")
        go_button.clicked.connect(lambda: self.load_url(web_view, url_entry.text()))
        tab_layout.addWidget(go_button)

        # Add the tab to the tab widget
        tab_index = self.tab_widget.addTab(tab, "New Tab")
        self.tab_widget.setCurrentIndex(tab_index)

        # Rename the tab after the site name
        self.rename_tab(tab_index, "New Tab")

    def rename_tab(self, index, title):
        # Update the tab name
        self.tab_widget.setTabText(index, title)

    def close_tab(self, index):
        if self.tab_widget.count() > 1:
            self.tab_widget.removeTab(index)

    def go_back(self):
        current_web_view = self.tab_widget.currentWidget().layout().itemAt(0).widget()
        current_web_view.back()

    def go_forward(self):
        current_web_view = self.tab_widget.currentWidget().layout().itemAt(0).widget()
        current_web_view.forward()

    def reload_page(self):
        current_web_view = self.tab_widget.currentWidget().layout().itemAt(0).widget()
        current_web_view.reload()

    def load_url(self, web_view, url):
        if not url.startswith("https"):
            url = "https://" + url
        web_view.load(QUrl(url))

        # Extract the site name from the URL
        site_name = self.get_site_name(url)

        # Update the tab name
        current_tab_index = self.tab_widget.currentIndex()
        self.rename_tab(current_tab_index, site_name)

        # Update link bar with the current URL
        self.link_bar.setText(url)

    def get_site_name(self, url):
        # Extract the site name from the URL using regular expression
        match = re.search(r"https?://(?:www\.)?([^/?]+)", url)
        if match:
            site_name = match.group(1)
            # Remove the top-level domain and capitalize the first letter
            site_name = site_name.split(".")[-2].capitalize()
            return site_name
        return "New Tab"


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = BrowserWindow()
    window.show()
    sys.exit(app.exec_())
